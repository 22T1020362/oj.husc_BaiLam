#pragma once
#pragma optimize("I_LOVE_U")
#pragma GCC optimize("O3,unroll-loops")
//#pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
#define F first
#define S second
typedef long long ll;
typedef long double lf;
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
const lf PI = acos(-1);
const string FNAME = "";

class DSU {
	private:
		ll *parent, *depth;
	public:
		DSU() {}
		DSU(ll num) {
			parent = new ll[num + 1]();
			depth = new ll[num + 1]();
			for (ll idx = 1; idx <= num; idx ++) {
				parent[idx] = idx;
				depth[idx] = 0;
			}
		}
		ll findSet(ll v) {
			while (v != parent[v]) {
				v = parent[v] = parent[parent[v]];
			}
			return v;
		}
		bool unionSet(ll lhs, ll rhs) {
			if ((lhs = findSet(lhs)) != (rhs = findSet(rhs))) {
				if (depth[lhs] < depth[rhs]) {
					swap(lhs, rhs);
				}
				parent[rhs] = lhs;
				if (depth[lhs] == depth[rhs]) {
					depth[lhs] ++;
				}
				return true;
			}
			return false;
		}
};

int main(int argc, wchar_t** argv, wchar_t** envp) {
	ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
//	freopen((FNAME + ".INP").c_str(), "r", stdin);
//	freopen((FNAME + ".OUT").c_str(), "w", stdout);
	ll n, m, res = 0;	cin >> n >> m;
	DSU dsu(n);
	while(m --){
		ll x, y;	cin >> x >> y;
		res += !dsu.unionSet(x, y);
	}
	cout << (res == 1 ? "YES" : "NO");
	return EXIT_SUCCESS;
}
